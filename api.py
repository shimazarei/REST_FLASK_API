{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-1-a462f531f411>, line 93)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-1-a462f531f411>\"\u001b[0;36m, line \u001b[0;32m93\u001b[0m\n\u001b[0;31m    if (validtreeObject(request_data)):\u001b[0m\n\u001b[0m                                      ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "# This is REST API python script whch defines different REST transactions.\n",
    "\n",
    "from flask import Flask, jsonify, request, Response, json\n",
    "from flask_sqlalchemy import SQLAlchemy\n",
    "from setting import *\n",
    "from model import *\n",
    "\n",
    "  \n",
    "\n",
    "#method Get\n",
    "@app.route(\"/tree\")\n",
    "def get_data():\n",
    "        return jsonify({'tree': Data.get_data()})\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def validtreeObject(TreeObject):\n",
    "    if ('iNode' in BookObject and 'Language' in BookObject and 'nodeName' in TreeObject):\n",
    "        return True\n",
    "    else:\n",
    "        return False \n",
    "\n",
    "    \n",
    "        \n",
    "#/tree/isbn_number    \n",
    "    \n",
    "@app.route(\"/tree\" , methods=['POST'])\n",
    "def add_data():\n",
    "    request_data = request.get_json()\n",
    "    if (validtreeObject(request_data)):\n",
    "        Data_recive.add_data(request_data['iNode'],request_data['Language'],request_data['nodeName'])\n",
    "        response= Response(\"\",201,mimetype='application/json')\n",
    "        response.headers['location'] = '/tree/' + str(request_data['iNode'])\n",
    "        return response\n",
    "    else:\n",
    "        InvalidtreeObjectErrorMsg = {\n",
    "            \"Error\": \"Invalid Node object passed in url\",\n",
    "            \"Help Msg\": \"Data passed in similar to this('iNode': 'iNode','Language':'english','nodeName':'marketing')\"\n",
    "        }\n",
    "        response = Response(json.dumps(InvalidtreeObjectErrorMsg), status=400, mimetype='application/json')\n",
    "        return response\n",
    "    \n",
    "        \n",
    "    \n",
    "@app.route(\"/tree/<int:iNode>\", methods=['POST'])    \n",
    "def get_node_by_iNode(iNode):\n",
    "    request_data = request.get_json()\n",
    "    if (validtreeObject(request_data)):\n",
    "        Data_recive.get_all_data(request_data['iNode'])\n",
    "        response= Response(\"\",202,mimetype='application/json')\n",
    "        response.headers['location'] = '/tree/' + str(request_data['iNode'])\n",
    "        return response\n",
    "    else:\n",
    "        InvalidtreeObjectErrorMsg = {\n",
    "            \"Error\": \"Invalid Node object passed in url\",\n",
    "            \"Help Msg\": \"Data passed in similar to this('iNode': 'iNode')\"\n",
    "        }\n",
    "        response = Response(json.dumps(InvalidtreeObjectErrorMsg), status=400, mimetype='application/json')\n",
    "        return response    \n",
    "   \n",
    "\n",
    "\n",
    "\n",
    "@app.route(\"/tree/<int:iNode>\", methods=['PUT'])\n",
    "def replace_Node(iNode):\n",
    "    request_data = request.get_json()\n",
    "    if (validtreeObject(request_data)):\n",
    "        Data_recive.replace_Node(iNode, request_data['iNode'],request_data['Language'],request_data['nodeName'])\n",
    "        response= Response(\"\",204,mimetype='application/json')\n",
    "        response.headers['location'] = '/tree/' + str(request_data['iNode'])\n",
    "        return response\n",
    "    else:\n",
    "        InvalidtreeObjectErrorMsg = {\n",
    "            \"Error\": \"Invalid Node object passed in url\",\n",
    "            \"Help Msg\": \"Data passed in similar to this('iNode': 'iNode','Language':'english','nodeName':'marketing')\"\n",
    "        }\n",
    "        response = Response(json.dumps(InvalidtreeObjectErrorMsg), status=400, mimetype='application/json')\n",
    "        return response\n",
    "    \n",
    "\n",
    "    \n",
    "    \n",
    "    \n",
    "\n",
    "@app.route(\"/tree/<int:iNode>\", methods=['PATCH'])\n",
    "def update_Node(iNode):\n",
    "    request_data = request.get_json()\n",
    "    if('iNode' in request_data):\n",
    "        Data_recive.replace_Node(iNode, request_data['iNode'])    \n",
    "    if('Language' in request_data):\n",
    "        Data_recive.replace_Node(iNode, request_data['Language'])\n",
    "    if('nodeName' in request_data):\n",
    "        Data_recive.replace_Node(iNode, request_data['nodeName']                         \n",
    "    if (validtreeObject(request_data)):\n",
    "    Data_recive.replace_Node(iNode, request_data['iNode'],request_data['Language'],request_data['nodeName'])\n",
    "    response= Response(\"\",204,mimetype='application/json')\n",
    "        response.headers['location'] = '/tree/' + str(request_data['iNode'])\n",
    "        return response\n",
    "    else:\n",
    "        InvalidtreeObjectErrorMsg = {\n",
    "            \"Error\": \"Invalid Node object passed in url\",\n",
    "            \"Help Msg\": \"Data passed in similar to this('iNode': 'iNode','Language':'english','nodeName':'marketing')\"\n",
    "        }\n",
    "        response = Response(json.dumps(InvalidtreeObjectErrorMsg), status=400, mimetype='application/json')\n",
    "        return response      \n",
    "                                 \n",
    "                                 \n",
    "                                 \n",
    "@app.route(\"/tree/<int:iNode>\", methods=['DELETE'])\n",
    "def delete_node(iNode):\n",
    "    request_data = request.get_json()                             \n",
    "    if (validtreeObject(request_data)):\n",
    "        Data_recive.delete_data(iNode, request_data['iNode'],request_data['Language'],request_data['nodeName'])\n",
    "        response= Response(\"\",204,mimetype='application/json')\n",
    "        response.headers['location'] = '/tree/' + str(request_data['iNode'])\n",
    "        return response\n",
    "    else:\n",
    "        InvalidtreeObjectErrorMsg = {\n",
    "        \"Error\": \"Invalid Node object passed in url\",\n",
    "        \"Help Msg\": \"Data passed in similar to this('iNode': 'iNode')\"\n",
    "        }\n",
    "        response = Response(json.dumps(InvalidtreeObjectErrorMsg), status=400, mimetype='application/json')\n",
    "        return response\n",
    "    \n",
    "                                 \n",
    "@app.route(\"/tree/users\", methods=['GET'])\n",
    "def Retrivation_data(iNode):                        \n",
    "    request_data = request.get_json()\n",
    "    if (validtreeObject(request_data)):\n",
    "        Data_recive._repr_(iNode, request_data['iNode'],request_data['Language'],request_data['nodeName'],request_data['num_of_page'],request_data['page_size'])\n",
    "        response= Response(\"\",204,mimetype='application/json')\n",
    "        response.headers['location'] = '/tree/users' + str(request_data['iNode'])\n",
    "        return response\n",
    "    else:\n",
    "        InvalidtreeObjectErrorMsg = {\n",
    "        \"Error\": \"Invalid Node id passed in url\",\n",
    "        \"Error\": \"Invalid Page Number\",\n",
    "        \"Error\":\"Invalid page size\" ,  \n",
    "        \"Missing Mandetory parameteres similar to this('iNode': 'iNode','Language':'english','nodeName':'marketing')\"\n",
    "        }\n",
    "        response = Response(json.dumps(InvalidtreeObjectErrorMsg), status=400, mimetype='application/json')\n",
    "        return response\n",
    "                                 \n",
    "query = \"SELECT * FROM node_tree WHERE iNode IN (SELECT * FROM node_tree_name WHERE )\"\n",
    "    to_filter = []\n",
    "\n",
    "    if iNode:\n",
    "        query += ' iNode=? AND'\n",
    "        to_filter.append(iNode)\n",
    "    if Language:\n",
    "        query += ' Language=? AND'\n",
    "        to_filter.append(Language)\n",
    "    if nodeName:\n",
    "        query += ' nodeName=? AND'\n",
    "        to_filter.append(nodeName)\n",
    "    if not (iNode or Language or nodeName):\n",
    "        return page_not_found(404)\n",
    "\n",
    "    query = query[:-4] + ';'\n",
    "    \n",
    "    conn = mysql.connect()\n",
    "    cur = conn.cursor()\n",
    "\n",
    "    results = cur.execute(query, to_filter).fetchall()\n",
    "\n",
    "    return jsonify(results)                  \n",
    "                                 \n",
    " \n",
    "                                 \n",
    "if __name__ == \"__main__\":\n",
    "    app.run()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
